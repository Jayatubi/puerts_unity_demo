const csharp = require("csharp");
const puerts = require("puerts");
try {
    //过滤路径中的非法字符
    const illegalCharacters = (function () {
        //microsoft windows platform
        if (csharp.UnityEngine.Application.platform === csharp.UnityEngine.RuntimePlatform.WindowsEditor ||
            csharp.UnityEngine.Application.platform === csharp.UnityEngine.RuntimePlatform.WindowsPlayer) {
            return ['"'];
        }
        return ['\\', '/', ':', '*', '?', '"', '<', ">", "|"];
    })();

    /**
     * 加载source-map-support模块 
     * source-map-support需要调用nodejs模块, 以下语句实现所需的接口
     */
    puerts.registerBuildinModule("path", {
        dirname(path) {
            for (const keyword of illegalCharacters) {
                if (path.includes(keyword)) {
                    return '';
                }
            }
            return csharp.System.IO.Path.GetDirectoryName(path);
        },
        resolve(dir, url) {
            for (const keyword of illegalCharacters) {
                if (dir.includes(keyword) || url.includes(keyword)) {
                    return '';
                }
            }
            return csharp.System.IO.Path.GetFullPath(csharp.System.IO.Path.Combine(dir, url));
        },
    });
    puerts.registerBuildinModule("fs", {
        existsSync(path) {
            return csharp.System.IO.File.Exists(path);
        },
        readFileSync(path) {
            return csharp.System.IO.File.ReadAllText(path);
        },
    });
    (function () {
        let global = this ?? globalThis;
        //global["Buffer"] = global["Buffer"] ?? {};
        //inlineSourceMap需要额外安装buffer库
        global["Buffer"] = global["Buffer"] ?? require("buffer").Buffer;
    })();
    require('source-map-support').install();

    csharp.UnityEngine.Debug.Log("source-map-support: <color=green>enable</color>");
} catch (e) {
    csharp.UnityEngine.Debug.LogError("source-map-support module exception:" + e.message + "\n" + e.stack);
}